Django 框架的使用
    1. 创建项目
        1. 创建目录
	    作用：用于保存所有的Django项目（可选）
	    指令：mkdir django(目录名称)
	2. 创建项目
	    指令：
	        cd django	// 进入django
	        使用 django-admin 指令创建 Django 项目
		语法：django-admin startproject 项目名称	// 创建具体项目文件
	3. 启动manage.py
	    python3 manage.py runserver
	    ./manage.py runserver	// 注意manage.py 中的默认时python,需要改为python3
    2. Django 项目的结构介绍
        1. manage.py
	    运行文件，包含执行Django中的各项操作的指令（子命令）
	    指令-->
	        启动服务：runserver
		创建应用：startapp
		创建管理员：createsuperuser
		... ...
		查看子命令，直接运行manage.py
	2. 项目主目录（与项目名称一致的目录）
	    1. __init__.py
	        项目的初始化文件，服务被启动，该文件自动被运行
	    2. urls.py
	        项目的基础url配置文件（基础的路由配置）
	    3. wsgi.py
	        Web Server Gateway Interface
		Web 服务网关接口
	    4. settings.py
	        项目的配置文件
		1. BASE_DIR：获取当前项目绝对路径
		2. SECRET_KEY: session 配置
		3. DEBUG: 是否启动调试模式
		    True：启用调试模式（开发环境中使用）
		    False：不启用调试模式（生产环境中使用）
		4. ALLOWED_HOSTS: 设置允许访问到本项目的地址列表
		    如果为空：只用本机才能访问（localhost/127.0.0.1）
		    如果允许在局域网中被外部机器访问的话，推荐使用['*'],表示任何能够表示该机器的地址都能访问到当前项目，启动服务时，必须使用：./manage.py runserver 0.0.0.0:端口号（默认8000，可以自行设置）。
		5. INSTALLED_APPS: 指定已安装的应用
		    如果有自定义应用的话，需要在此注册
		6. MIDDLEWARE：中间件，如果有自定义的中间件，需要在此注册
		7. ROOT_URLCONF: 用于指定项目的基础路由配置文件
		8. TEMPLATES: 指定模板的信息
		9. DATABASES：指定数据库的信息
		10. LANGUAGE_CODE: 语言设置，如果需要中文的话，允许将值更改为'zh-Hans'
		11. TIME_ZONE: 指定时区，中国时区，允许将值设置为'Asia/Shanghai'
    3. URL 的使用
        1. urls.py
	    默认在主目录中，主路由配置文件，包含最基本的地址映射
	    作用：通过urls中定义好的地址找到对应的视图处理函数
	    注意：匹配地址时，至上而下依次匹配，匹配成功及不再向下匹配
	2. url 的语法
	    作用：匹配用户的访问路径
	    from django.conf.urls import url
	    语法：
	        url(regex,views,kwargs=None,name=None)
		参数：
		    1. regex：允许是正则表达式，匹配请求的url
		    2. views：对应的视图处理函数的名称
		    3. kwargs：字典，用来向views传参，如果没有参数可以省略
		    4. name：为url起别名，在地址反向解析时使用
	3. 通过url向视图传参
	    1. 使用正则表达式传参
	        使用子组参数，一个子组就是一个参数，要传递多个参数的话需要使用多个子组，中间用/隔开
		子组 - ()
		et：
		    urlpatterns = [
		        // 当访问路径是show/的时候，交给show_views处理
		        url(r'^show/$',show_views),
			// 当访问路径是show/两位数字的时候，交给show1_views处理
			url(r'^show/(\d{2})/$',show1_views),
		    ]

		    views.py中show1_views函数
		    def show1_views(request,num1):
		        // num1 表示的就是路径"show/"后面的第一个参数
		        return HttpResponse('')
	    2. 使用url()第三个参数传参--字典传参
	        et:
		    dic = {
		        'name' = '张三丰',
			'age' = 18
		    }
		    url(r'^show3/$',show3_views,dic)
		    在views.py
		    def show3_views(request,name,age):
		        rerurn 
	4. url 反向解析
	    name：为了给当前的url地址起别名，反向解析时使用
	    反向解析：通过别名找对应地址
	    url(regex,views,kwargs=None,name='别名')
	    1. 在模板上做反向解析
	        1. 基本解析
		    {% url '别名' %}
		2. 带参解析
		    {% url '别名' '参数1' '参数2' '...' %}
	    2. 在视图上做反向解析
	        1. 基本解析
		    url = reverse('别名')
		    通过别名解析的地址
		2. 带参解析
		    url = reverse('别名',args=('参数1','参数2',...))
    4. Django 中的应用
        1. 什么是应用
	    应用就是网站中的一个独立的程序模块
	    在Django中，主目录一般不处理用户的具体请求，主目录主要做的是项目的初始化以及请求的分发（分布式请求处理），而具体的请求由各个应用去处理
	2. 创建应用
	    1. 指令
	        ./manage.py startapp 应用名称
		et:
		    ./manage.py startapp news
	    2. 在 settings.py 中进行注册
	        在 INSTALLED_APPS 中追加引用名称
		et:
		    INSTALLED_APPS = [
		    ...,
		    'news',
		    '自定义的应用名称',
		    ]
	3. 应用的机构组成
	    1. migrations 目录
	        存放数据的中间文件
	    2. __init__.py
	        应用的初始化文件
	    3. admin.py
	        应用的后台管理配置文件
	    4. apps.py
	        应用的属性配置文件
	    5. models.py
	        Models 与模型相关的映射文件
	    6. tests.py
	        应用的单元测试文件
	    7. views.py
	        定义视图处理函数的文件
	4. 分布式的路由系统
	    在每个应用中创建urls.py,内容的格式参考主目录的urls.py,需手动创建
	    主目录urls.py 导入include,同时在urlpatterns中添加url(regex,include('应用名.urls'))