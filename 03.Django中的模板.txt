Django中的模板（Templates）
    1. 什么是模板
        模板就是要动态呈现给用户的网页
	模板的本质就是网页--前后端，动静结合的网页
	Django的模板引擎是由Django自己提供的，并不是Jinja2,所以Django的模板语法与Flask（Jinja2）的语法会有所不同
    2. 模板的设置
        在 settings.py 中有一个TEMPLATES 变量
	1. BACKEND ：指定使用的模板的引擎
	2. DIRS ：指定模板的存放目录们
	    1. 如果写东西，则按照写好的路径去找模板
	    2. 如果未写内容，则Django会自动到每一个应用中所有叫templates的目录来作为模板的存放目录
	3. APP_DIRS ：是否自动搜索应用中的目录
	    True ：表示搜索应用中的templates 的目录
    3. 模板的加载方式
        1. 通过 loader 对象获取模板，再通过HttpResponse 进行响应
	    from django.template import loader
	    def xx_views(request):
	        # 1. 通过 loader 加载模板
		t = loader.get_template('模板名称')
		# 2. 将模板渲染成字符串
		html = t.render()
		# 3. 将字符串通过HttpResponse响应给客户端
		return HttpResponse(html)
	2. 使用 render 函数直接加载并响应模板
	    from django.shortcuts import render
	    def xxxviews(request):
	        return render(request,'模板名称')
    4. 模板的语法
        1. 模板的变量
	    1. 作用：将后端的数据传递给模板进行显示
	    2. 在 Django 中允许作为变量传递给模板的数据类型
	        字符串，整数，列表，元组，字典，函数，对象
		
	    3. 变量的语法
	        变量们必须要封装到字典中才能传递给模板
		1. 使用 loader 加载模板
		    dic = {
		        key1:value1,
			key2:value2,
		    }
		    t = loader.get_template('xxx.html')
		    return HttpResponse(t.render(locals() 或者 dic))
		2. 使用 render 方法加载并返回模板
		    return render(request,'xxx.html',dic 或 locals())
	    4. 在模板中使用变量
	        {{key}}
		注意：
		    1. 方法在模板中使用时，方法不需要使用（）来调用，直接书写方法名即可
		    2. 使用索引时，使用.index/.key,不能使用[index]
	2. 标签
	    1. 作用
	        将服务器端的功能嵌入到模板中
	    2. 语法
	        {% 标签内容 %}
	3. 常用标签
	    1. comment 注释标签
	    2. for 标签
	        作用：循环遍历 列表，字典，元组
		语法：
		    {% for 变量 in 列表|元组|字典 %}
		    {% endfor %}
		循环中允许使用 forloop 内置变量来获取循环的信息
		    forloop.counter ：表示当前循环遍历的次数
		    forloop.first ：判断是否是第一次循环
		    forloop.last ：判断是否是最后一次循环
	    3. if 标签
	        作用：在模板中完成变量的判断操作
		语法：
		    1. if
		        {% if 条件 %}
			    满足条件时要执行的内容
			{% endif %}
		    2. if ... else
		        {% if 条件 %}
			    满足条件执行的内容
			{% else %}
			    不满足条件执行内容
			{% endif %}
		    3. if ... elif ... else
			同上
	4. 过滤器
	    在变量输出显示之前，对变量进行筛选和过滤
	    1. 语法
	        {{变量|过滤器:参数}}
	    2. 常用过滤器
	        upper ：变大写
		lower ：变小写
		add:num	将num值累加到变量或则拼接列表
		floatformat:n 将变量四舍五入到n位小数
		truncatechars:n 将变量截取保留至n位字符（包含）
		... 
		看文档
	5. 静态文件
	    在Django中，不被解释器所动态解析的文件就是静态文件
	    1. 静态文件处理
	        在settings.py中设置有关静态文件的信息
		1. 设置静态文件的访问路径
		    在浏览器中通过哪个地址能够找到静态文件
		    STATIC_URL = '/static/'
		    如果访问路径是 http://localhost:8000/static/...
		    那么就到静态文件存储路径中找文件,而不走路由（urls.py）
		2. 设置静态文件的存储路径
		    指定静态文件存储在服务器上的哪个位置处
		    STATICFILES_DIRS=(os.path.join(BASE_DIR,'static'),)
		    静态文件目录的存放位置
		        1. 在项目的根目录处创建一个static目录，用于保存静态文件们
			2. 每个应用中也可以创建一个static目录，用于保存静态文件们
	    2. 访问静态文件
		1. 直接使用静态文件访问路径进行访问
		    http://localhost:8000/static/...
		    et:
		        <img src='/static/images/a.jpg'>
			<img src='http://localhost:8000/static/images/a.jpg'>
		2. 使用 {% static %} 访问静态资源
		    {% static %} 表示的就是静态资源的访问路径
		    1. 在模板的最顶层增加
		        {% load static %}
		    2. 在使用静态资源时
		        <img src="{% static 'images/a.jpg' %}">
	6. 模板的继承
	    1. 语法
	        1. 在父模板中
		    必须要标识出哪些内容在子模板中允许被修改
		    标签：
		        {% block 名称 %}
			{% endblock %}
		    block 的作用
		        1. 在父模板中正常显示
			2. 在子模板中，如果不修改的话则按父模板的显示，如果需要修改，则按照子模板的内容显示
		2. 在子模板中
		    1. 指定继承自哪个父模板
		        {% extends ‘父模板名称’ %}
		    2. 增加 block 标签，改写属于自己的内容
		        {% block 名称 %}
			{% endblock %}
		注意：模板的继承，变量没法继承